syntax = "proto3";

package taxi.v1;

import "google/api/annotations.proto";

service TaxiService {
  // ListAssets rpc returns a subset of supported elements assets that could be accepted as payment
  // for topups
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse) {
    option (google.api.http) = {
      get: "/v1/assets"
    };
  }
  // TopupWithAsset rpc returns a transaction (pset) with a LBTC input and a payout with defined asset fot taxi.
  // The transaction is signed with SIGHASH_SINGLE | ANYONECANPAY 
  rpc TopupWithAsset(TopupWithAssetRequest) returns (TopupWithAssetResponse) {
    option (google.api.http) = {
      post: "/v1/asset/topup"
      body: "*"
    };
  }

  // TopupWithKnownPayout adds ins and outs to the given transaction if this contains at least one
  // known payout, ie. one output with a "whitelisted" script.
  rpc TopupWithKnownPayout(TopupWithKnownPayoutRequest) returns (TopupWithKnownPayoutResponse) {
    option (google.api.http) = {
      post: "/v1/payout/topup"
      body: "*"
    };
  }
}

message ListAssetsRequest {}
message ListAssetsResponse {
  repeated AssetDetails assets = 1; // all the assets available for topups
}

message TopupWithAssetRequest {
  string asset_hash = 1; // asset hash to be used for payout
  uint64 estimated_tx_size = 2; // the estimated tx size to cover network fees for
  uint64 millisat_per_byte = 3; // how many millisatoshi per byte we want to spend. ie. 0.1 sat/byte = 100 mSats/byte
}
message TopupWithAssetResponse {
  Topup topup = 1; // the Topup message 
  int64 expiry = 2; // the unix timestamp of the topup expiration date. After that date, the taxi sends the locked utxos to itself to prevent being spent by others
  string asset_hash = 3; // the asset hash used as payout for bitcoin fees
  uint64 asset_amount = 4; // the asset denominated amount expressed in satoshis to be used as payout. It includes also the spread as taxi service fee
  uint64 asset_spread = 5; // the spread amount expressed in asset denominated satoshis used to pay the taxi service fees
  repeated BlindingData in_blinding_data = 6; // Taxi's inputs revealed data in case of confidential inputs
}

message TopupWithKnownPayoutRequest {
  string partial = 1; // transaction in base64 format including the known payout
  uint64 millisat_per_byte = 2; // how many millisatoshi per byte we want to spend
  UnblindedInput unblinded_input = 3; // Users input revealed data in case of confidential inputs, used to blind users output
}
message TopupWithKnownPayoutResponse {
  Topup topup = 1; // the Topup message
  int64 expiry = 2; // the unix timestamp after wich the locked LBTC input will be double-spent
}
message UnblindedInput {
  uint32 index = 1;
  string asset = 2;
  uint64 amount = 3;
  string asset_blinder = 4;
  string amount_blinder = 5;
}

message Topup {
  string topup_id = 1; // the unique id of the topup
  string partial = 2; // the partial tx with paid network fees
}

message AssetDetails {
  string asset_hash = 1; // the asset hash used as identifier on the network
  uint32 basis_point = 2; // the taxi service fee expressed in basis points for the given asset
  double asset_price = 3; // the price = the amount of assets to equal 1 BTC
}

message BlindingData {
  string asset = 1;
  uint64 value = 2;
  bytes asset_blinder = 3;
  bytes value_blinder = 4;
}
